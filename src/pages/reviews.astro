---
import BaseLayout from '../layouts/BaseLayout.astro';
import ReviewCard from '../layouts/components/ReviewCard.astro';

import { getAllReviews } from '../lib/api';
import { urlForImage } from '../lib/imageBuilder'

const reviews = await getAllReviews();

const sortedReviews = reviews.sort((a,b) => new Date(b.published).getTime() - new Date(a.published).getTime())

interface Review {

}
---
<!-- Below is your "component template." It's just HTML, but with
	some magic sprinkled in to help you build great templates. -->
<BaseLayout heroTitle='All Reviews'>
	<div class="bg-brandyellow-500">
		<div class="mx-auto max-w-2xl py-16 px-4 sm:py-24 sm:px-6 lg:max-w-7xl lg:px-8">

			<h2 class="text-2xl font-bold tracking-tight text-gray-900">Pies we've consumed <small>({reviews.length} so far)</small></h2>

			<div class="flex flex-col w-64">
				<label for="sortBy" class="block text-sm font-medium text-gray-700">Sort by:</label>
				<select id="sortBy" name="sortBy" class="bg-brandwhite-500 mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-brandblue-600 focus:outline-none focus:ring-brandblue-600 sm:text-sm">
					<option selected value="date-recent">Date (recent first)</option>
					<option value="date-oldest">Date (oldest first)</option>
					<option value="review-top">Overall Rating (top first)</option>
					<option value="review-bottom">Overall Rating (bottom first)</option>
					<option value="price-top">Price (expensive first)</option>
					<option value="price-bottom">Price (cheapest first)</option>
				</select>
			</div>
		
			<div id='reviews' class="mt-6 grid grid-cols-2 gap-y-10 gap-x-6 sm:grid-cols-3 lg:grid-cols-4 xl:gap-x-8">
				{sortedReviews.map((review:Review) => 
					<ReviewCard review={review} overall={review.overall} published={review.published} price={review.price} />	
				)}
			</div>
		</div>
	</div>
</BaseLayout>

<script>
	function sortOverall(a,b) {
		return b.dataset.overall.localeCompare(a.dataset.overall, 'en', { numeric: true });
	}
	function sortOverallReverse(a,b) {
		return a.dataset.overall.localeCompare(b.dataset.overall, 'en', { numeric: true });
	}
	function sortPriceExpensive(a,b) {
		return b.dataset.price.localeCompare(a.dataset.price, 'en', { numeric: true });
	}
	function sortPriceCheap(a,b) {
		return a.dataset.price.localeCompare(b.dataset.price, 'en', { numeric: true });
	}
	function sortDateNew(a,b) {
		return b.dataset.date.localeCompare(a.dataset.date);
	}
	function sortDateOld(a,b) {
		return a.dataset.date.localeCompare(b.dataset.date);
	}


	const reviews = Array.from(document.querySelectorAll('.review'));
	let sorted = [];

	const sortBy = document.getElementById('sortBy');
	sortBy.addEventListener('change', (e) => {
		switch (e.target.value) {
			case 'date-recent':
				sorted = reviews.sort(sortDateNew);
				break;
			case 'date-oldest':
				sorted = reviews.sort(sortDateOld);
				break;
			case 'review-top':
				sorted = reviews.sort(sortOverall);
				break;
			case 'review-bottom':
				sorted = reviews.sort(sortOverallReverse);	
				break;
			case 'price-top':
				sorted = reviews.sort(sortPriceExpensive);	
				break;
			case 'price-bottom':
				sorted = reviews.sort(sortPriceCheap);	
				break;
		
			default:
				break;
		}
		sorted.forEach(e => document.querySelector("#reviews").appendChild(e));
	});
</script>
